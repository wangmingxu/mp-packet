<style lang="less">
page {
  background-color: #f6f6f6;
  font-family: 'Microsoft YaHei', '黑体', 'Arial', '宋体', sans-serif;
}
.container {
  height: 100%;
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: space-between;
  box-sizing: border-box;
}
.top {
  width: 100%;
}
.card {
  position: absolute;
  top: 204rpx;
  width: 700rpx;
  left: 50%;
  transform: translateX(-50%);
  height: 700rpx;
  box-sizing: border-box;
  background-color: #fff;
  border-radius: 5px;
  // box-shadow: 3rpx 3rpx 2rpx #ececec,-3rpx 0px 2rpx #ececec;
}
</style>

<script>
import wepy from 'wepy'
import 'wepy-async-function'
import promisify from './utils/promisify'
import { requestBaseUrl } from './constant'
import requestPromise from './utils/request'

export default class extends wepy.app {
  config = {
    pages: [
      'pages/index',
      'pages/share',
      'pages/result',
      'pages/packet',
      'pages/history',
      'pages/balance'
    ],
    window: {
      backgroundTextStyle: 'light',
      navigationBarBackgroundColor: '#fff',
      navigationBarTitleText: '声财包',
      navigationBarTextStyle: 'black',
      backgroundColor: '#f6f6f6',
      enablePullDownRefresh: true
    },
    tabBar: {
      list: [
        {
          pagePath: 'pages/history',
          text: '记录',
          selectedIconPath: 'assets/images/icon_record_active.png',
          iconPath: 'assets/images/icon_record.png'
        },
        {
          pagePath: 'pages/index',
          text: '语音口令',
          selectedIconPath: 'assets/images/icon_audio_active.png',
          iconPath: 'assets/images/icon_audio.png'
        },
        {
          pagePath: 'pages/balance',
          text: '余额',
          selectedIconPath: 'assets/images/icon_balance_active.png',
          iconPath: 'assets/images/icon_balance.png'
        }
      ],
      color: '#565656',
      backgroundColor: '#ffffff',
      selectedColor: '#fa8330',
      borderStyle: 'white',
      position: 'bottom'
    }
  }

  globalData = {
    userInfo: null
  }

  constructor() {
    super()
    this.use('requestfix')
  }

  async getSystemInfo() {
    await promisify(wx.getSystemInfo)
  }

  async getUserInfo() {
    if (this.globalData.userInfo) return this.globalData.userInfo
    // const session = await promisify(wx.checkSession);
    // if(!session) {
    const { code } = await promisify(wx.login)
    // }
    const { userInfo, signature } = await promisify(wx.getUserInfo)
    const loadSessionRet = await requestPromise({
      url: `${requestBaseUrl}/loadSessionKey`,
      data: { code }
    })
    const my_session_key = loadSessionRet.data
    const initUserInfoRet = await requestPromise({
      url: `${requestBaseUrl}/initRedPaperUser`,
      data: Object.assign(userInfo, { signature, my_session_key })
    })
    const signInfo = initUserInfoRet.data
    await promisify(wx.setStorage, { key: 'signInfo', data: signInfo })
    this.globalData.userInfo = userInfo
    return this.globalData.userInfo
  }
}
</script>
